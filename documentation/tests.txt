# 1. Check and create all profiles ===============================
# Good to do this before starting to use the module: create the
# profile instances for all users
# The missing profiles will anyway be created via the middleware:
# if the user that browses the page does not have his.
# But run 

>>> list_users()
dominum
Fernandez
jean-no
k2r
patrainet
pds
piervit
Pitlaloose
sgamier
testman
Zelf
>>> list_dm_users()
patrainet
>>> check_all_users()
patrainet has dm_user
###### Users that do not have a dm_user: #####
dominum - Fernandez - jean-no - k2r - pds - piervit - Pitlaloose - sgamier - testman - Zelf
>>> create_all_dm_users()
dm_user created for dominum
dm_user created for Fernandez
dm_user created for jean-no
dm_user created for k2r
patrainet already has dm_user
dm_user created for pds
dm_user created for piervit
dm_user created for Pitlaloose
dm_user created for sgamier
dm_user created for testman
dm_user created for Zelf
>>> dm_users=DmUser.objects.all()
>>> check_all_users()
dominum has dm_user
Fernandez has dm_user
jean-no has dm_user
k2r has dm_user
patrainet has dm_user
pds has dm_user
piervit has dm_user
Pitlaloose has dm_user
sgamier has dm_user
testman has dm_user
Zelf has dm_user
###### Users that do not have a dm_user: #####

# 2. Messaging ==================================================
# configure variables user1 and user2 in tests/utils.py before
>>> from django_messaging.tests.utils import *
>>> user1.username
u'patrainet'
>>> user2.username
u'testman'
>>> from django_messaging.models import *
>>> profile1=user1.get_profile()
>>> profile2=user2.get_profile()
>>> profile1.print_messages()
id: 19 - Zelf -> patrainet - readed
id: 16 - testman -> patrainet - readed
id: 14 - Zelf -> patrainet - readed
3 readed messages
0 unreaded messages
num_messages=0
>>> profile2.print_messages()
id: 18 - patrainet -> testman
id: 13 - patrainet -> testman
id: 12 - patrainet -> testman
0 readed messages
3 unreaded messages
num_messages=4
>>> profile2.delete_all_messages()
Deleting message patrainet -> testman
Deleting message patrainet -> testman
Deleting message patrainet -> testman
3 messages deleted
>>> profile2.print_messages()
No messages
>>> profile1.send_message(user2,'hello')
True
>>> profile2.print_messages()
id: 21 - patrainet -> testman
0 readed messages
1 unreaded messages
num_messages=-1
>>> msg=profile2.get_messages().filter(id=21)[0]
>>> msg.readed=True
>>> msg.save()
>>> profile2.print_messages()
id: 21 - patrainet -> testman - readed
1 readed messages
0 unreaded messages
num_messages=-1
>>> profile2.delete_message(21)
Deleting message patrainet -> testman
True
>>> profile2.print_messages()
No messages
>>> profile1.print_messages()
id: 19 - Zelf -> patrainet - readed
id: 16 - testman -> patrainet - readed
id: 14 - Zelf -> patrainet - readed
3 readed messages
0 unreaded messages
num_messages=0
>>> profile2.delete_message(16)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/usr/lib/python2.4/site-packages/django_messaging/models.py", line 37, in delete_message
    msg=DmMessage.objects.get(id=message_id,user=self.user)
  File "/usr/lib/python2.4/site-packages/django/db/models/manager.py", line 69, in get
    return self.get_query_set().get(*args, **kwargs)
  File "/usr/lib/python2.4/site-packages/django/db/models/query.py", line 263, in get
    raise self.model.DoesNotExist, "%s matching query does not exist." % self.model._meta.object_name
django.db.models.base.DoesNotExist: DmMessage matching query does not exist.
>>> 
